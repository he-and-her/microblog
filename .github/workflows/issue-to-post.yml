name: Issue â†’ Post
on:
  issues:
    types: [labeled]

permissions:
  contents: write
  issues: write

jobs:
  publish:
    if: contains(github.event.issue.labels.*.name, 'publish')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - id: build
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;

            // helper to extract body sections from "Issue Forms" layout
            function pick(heading, fallback='') {
              const re = new RegExp(`### ${heading}[\\s\\S]*?\\n\\n([\\s\\S]*?)(\\n###|$)`);
              const m = (issue.body || '').match(re);
              return (m && m[1].trim()) || fallback;
            }

            // sanitize helpers
            const slugify = s => s
              .toLowerCase()
              .replace(/[^a-z0-9]+/g, '-')
              .replace(/^-+|-+$/g, '');

            const z2 = n => String(n).padStart(2, '0');

            // inputs
            const title = pick('Title', issue.title);
            let dtStr = pick('Datetime \\(ISO-8601, local or UTC\\)', '');
            const idInput = pick('Optional row id', '');
            const content = pick('Content \\(Markdown\\)', issue.body || '');

            // parse datetime (support "YYYY-MM-DD HH:MM:SS" or ISO)
            function parseToISO(dt) {
              if (!dt) return null;
              // replace space with 'T' if needed
              let s = dt.trim();
              if (/^\d{4}-\d{2}-\d{2} \d{2}:\d{2}(:\d{2})?$/.test(s)) {
                s = s.replace(' ', 'T');
                if (/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}$/.test(s)) s += ':00';
              }
              const d = new Date(s);
              if (isNaN(d.getTime())) return null;
              return d.toISOString(); // always ISO UTC
            }

            const nowISO = new Date().toISOString();
            const iso = parseToISO(dtStr) || nowISO;

            // filename prefix from ISO
            const d = new Date(iso);
            const yyyy = d.getUTCFullYear();
            const mm = z2(d.getUTCMonth()+1);
            const dd = z2(d.getUTCDate());
            const HH = z2(d.getUTCHours());
            const MM = z2(d.getUTCMinutes());
            const SS = z2(d.getUTCSeconds());

            const titleSlug = slugify(title) || 'post';
            const filePrefix = `${yyyy}-${mm}-${dd}-${HH}${MM}${SS}`;
            const fname = `posts/${filePrefix}-${titleSlug}.md`;

            // row id (prefer user-supplied)
            const generatedId = `${titleSlug}-${yyyy}-${mm}-${dd}-${HH}${MM}${SS}`;
            const safeId = slugify(idInput) || generatedId;

            // front matter: include title, datetime (as ISO or space format), id
            // We'll store datetime in "YYYY-MM-DD HH:MM:SS" for your Elixir NaiveDateTime parser convenience.
            const humanDT = `${yyyy}-${mm}-${dd} ${HH}:${MM}:${SS}`;
            // Build front matter without confusing YAML:
            const fm = [
              '---',
              `title: "${title.replace(/"/g, '\\"')}"`,
              `datetime: ${humanDT}`,
              `id: ${safeId}`,
              '---',
              ''
            ].join('\n');

            const body = `${fm}\n${content.trim()}\n`;

            core.setOutput('fname', fname);
            core.setOutput('row_id', safeId);
            core.setOutput('iso', iso);
            core.setOutput('body', body);

      - name: Commit post
        run: |
          mkdir -p posts
          printf "%s" "${{ steps.build.outputs.body }}" > "${{ steps.build.outputs.fname }}"
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add "${{ steps.build.outputs.fname }}"
          git commit -m "post: ${{ steps.build.outputs.fname }}"
          git push

      - name: Comment + close issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Published as \`${{ steps.build.outputs.fname }}\` with id \`${{ steps.build.outputs.row_id }}\`.`
            });
            await github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed'
            });

  build-deploy:
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.17'
          otp-version: '27'
      - run: mix deps.get
      - run: mix site.build
      - uses: actions/upload-pages-artifact@v3
        with:
          path: _site
      - uses: actions/deploy-pages@v4
